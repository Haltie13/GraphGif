(*
  PROGRAM
  --------
  Program może składać się z:
    - deklaracji zmiennych,
    - deklaracji grafów,
    - wywołań komend (np. export, BFS).
*)
program       ::= { var_decl ";" } { graph_decl ";" } { command ";" }

(*
  DEKLARACJE ZMIENNYCH
  --------------------
  Pozwalają zdefiniować literały (np. listy atrybutów, węzłów lub krawędzi)
  do późniejszego wykorzystania w definicjach grafów.
*)
var_decl      ::= "var" identifier "=" var_value
var_value     ::= literal_attr_list
                | literal_node_list
                | literal_edge_list

(*
  DEFINICJA GRAFU
  ----------------
  Graf zapisywany jest z opcjonalnym słowem kluczowym "graph" oraz nazwą (identifier),
  a jego ciało składa się z dwóch części:
    1. Globalne deklaracje atrybutów – dla całego grafu, węzłów i krawędzi.
    2. Lokalne deklaracje węzłów (node_decl) i krawędzi (edge_decl).
*)
graph_decl    ::= graph_head "{" { global_attr_decl ";" } { statement ";" } "}"
graph_head    ::= [ "graph" ] identifier

(*
  GLOBALNE DEKLARACJE ATRYBUTÓW
  ------------------------------
  Pozwalają ustawić globalne właściwości:
    - "graph" - atrybuty dla całego grafu,
    - "node"  - atrybuty dla wszystkich węzłów,
    - "edge"  - atrybuty dla wszystkich krawędzi.
  Deklaracja może przyjmować literalną listę atrybutów lub wartość zmiennej.
*)
global_attr_decl 
              ::= ("graph" | "node" | "edge") ( literal_attr_list | var_ref )

(*
  LOKALNE DEKLARACJE
  -------------------
  Lokalne instrukcje definiują węzły lub krawędzie.
*)
statement     ::= node_decl | edge_decl

(*
  DEKLARACJA WĘZŁÓW
  -----------------
  Umożliwia deklarację pojedynczych węzłów lub grupy poprzez:
    - literalną listę identyfikatorów lub
    - odwołanie do zmiennej.
  Opcjonalnie można podać także listę atrybutów (literal lub zmienna).
*)
node_decl     ::= ( literal_node_list | var_ref ) [ ( literal_attr_list | var_ref ) ]
literal_node_list
              ::= identifier { "," identifier }

(*
  DEKLARACJA KRAWĘDZI
  -------------------
  Określa połączenie między dwoma węzłami z opcjonalną listą atrybutów.
  Obsługiwane są krawędzie nieskierowane i skierowane.
*)
edge_decl     ::= identifier edge_op identifier [ ( literal_attr_list | var_ref ) ]
edge_op       ::= "--" | "->" | "<-"

(*
  LITERALNA LISTA ATRYBUTÓW
  --------------------------
  Atrybuty zapisywane są w nawiasach kwadratowych, oddzielane przecinkami.
  Umożliwiamy przypisanie operatorami "=" lub ":".
*)
literal_attr_list
              ::= "[" [ attribute { attr_sep attribute } [ attr_sep ] ] "]"
attr_sep      ::= ","
attribute     ::= identifier ( "=" | ":" ) value
value ::= identifier | number | string

(*
  LISTA KRAWĘDZI – przydatna przy przypisaniu do zmiennej wielu krawędzi.
*)
literal_edge_list
              ::= edge_decl { "," edge_decl }

(*
  ODWOŁANIE DO ZMIENNEJ
  ----------------------
  Używane jest w miejscach, gdzie oczekiwany jest literał, a poprzedza się je znakiem dolara.
*)
var_ref       ::= "$" identifier

(*
  KOMENDY / WYWOŁANIA OPERACJI
  -----------------------------
  Pozwalają na wywołanie funkcji czy algorytmów (np. export, BFS) na zdefiniowanych grafach.
  Każda komenda ma nazwę oraz listę argumentów.
*)
command       ::= identifier "(" [ arg_list ] ")"
arg_list      ::= argument { "," argument }
argument      ::= [ identifier ":" ] path
path          ::= identifier { "." identifier }

(*
  ELEMENTY LEXYKALNE
  -------------------
  Standardowa definicja identyfikatora, liczby, ciągu znaków.
*)
identifier    ::= letter { letter | digit | "_" }
number        ::= digit { digit }
string        ::= ("\"" | "'") { char } ("\"" | "'")
letter        ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" |
                  "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" |
                  "U" | "V" | "W" | "X" | "Y" | "Z" |
                  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" |
                  "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
                  "u" | "v" | "w" | "x" | "y" | "z"
digit         ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
char          ::= any_character_except_the_terminating_quote