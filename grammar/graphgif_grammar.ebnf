(*
  PROGRAM
  --------
  Program może składać się z:
    - deklaracji zmiennych,
    - deklaracji grafów,
    - wywołań komend (np. export, BFS).
*)
program       ::= { var_decl ";" } { graph_decl ";" } { command ";" }

(*
  DEKLARACJE ZMIENNYCH
  --------------------
  Zmienne mogą przechowywać:
    - listy atrybutów,
    - zadeklarowane węzły (z atrybutami),
    - zadeklarowane krawędzie (z atrybutami),
    - listy węzłów/krawędzi do późniejszego wykorzystania.
*)
var_decl      ::= "var" identifier "=" var_value
var_value     ::= node_decl
                | edge_decl
                | literal_attr_list
                | node_group
                | edge_group

node_group    ::= "nodes" "(" [node_decl { "," node_decl }] ")"
edge_group    ::= "edges" "(" [edge_decl { "," edge_decl }] ")"

(*
  DEFINICJA GRAFU
  ----------------
  Graf zapisywany jest z opcjonalnym słowem kluczowym "graph" oraz nazwą,
  a jego ciało składa się z:
    1. Globalnych deklaracji atrybutów,
    2. Lokalnych deklaracji węzłów i krawędzi.
*)
graph_decl    ::= graph_head "{" { global_attr_decl ";" } { statement ";" } "}"
graph_head    ::= [ "graph" ] identifier

(*
  GLOBALNE DEKLARACJE ATRYBUTÓW
  ------------------------------
  Pozwalają ustawić globalne właściwości:
    - "graph" - atrybuty dla całego grafu,
    - "node"  - atrybuty dla wszystkich węzłów,
    - "edge"  - atrybuty dla wszystkich krawędzi.
*)
global_attr_decl 
              ::= ("graph" | "node" | "edge") ( literal_attr_list | var_ref )

(*
  LOKALNE DEKLARACJE
  -------------------
  Lokalne instrukcje definiują węzły lub krawędzie.
  Mogą być bezpośrednio zdefiniowane lub odwoływać się do zmiennych.
*)
statement     ::= node_decl | edge_decl | var_ref

(*
  DEKLARACJA WĘZŁÓW
  -----------------
  Umożliwia deklarację węzłów z opcjonalnymi atrybutami.
  Węzły mogą być zadeklarowane indywidualnie lub grupowo.
*)
node_decl     ::= node_id [ ( literal_attr_list | var_ref ) ]
node_id       ::= identifier | node_list
node_list     ::= "(" identifier { "," identifier } ")"

(*
  DEKLARACJA KRAWĘDZI
  -------------------
  Określa połączenie między węzłami z opcjonalnymi atrybutami.
  Obsługiwane są krawędzie nieskierowane i skierowane.
*)
edge_decl     ::= node_id edge_op node_id [ ( literal_attr_list | var_ref ) ]
edge_op       ::= "--" | "->" | "<-"

(*
  LITERALNA LISTA ATRYBUTÓW
  --------------------------
  Atrybuty zapisywane są w nawiasach kwadratowych.
*)
literal_attr_list
              ::= "[" [ attribute { "," attribute } [ "," ] ] "]"
attribute     ::= identifier ( "=" | ":" ) value
value         ::= identifier | number | string

(*
  ODWOŁANIE DO ZMIENNEJ
  ----------------------
  Używane jest w miejscach, gdzie oczekiwany jest literał.
*)
var_ref       ::= "$" identifier

(*
  KOMENDY / WYWOŁANIA OPERACJI
  -----------------------------
  Pozwalają na wywołanie funkcji czy algorytmów na zdefiniowanych grafach.
*)
command       ::= identifier "(" [ arg_list ] ")"
arg_list      ::= argument { "," argument }
argument      ::= [ identifier ":" ] ( path | var_ref )
path          ::= identifier { "." identifier }

(*
  ELEMENTY LEXYKALNE
  -------------------
*)
identifier    ::= letter { letter | digit | "_" }
number        ::= digit { digit } [ "." digit { digit } ]
string        ::= "'" { char } "'" | "\"" { char } "\""
letter        ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
digit         ::= "0" | "1" | ... | "9"
char          ::= any_character_except_the_terminating_quote