# Generated from Graphgif.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,1,1,1,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,5,24,157,8,24,10,24,12,24,160,9,24,1,25,4,25,163,8,25,11,25,
        12,25,164,1,26,1,26,1,26,1,26,5,26,171,8,26,10,26,12,26,174,9,26,
        1,26,1,26,1,27,4,27,179,8,27,11,27,12,27,180,1,27,1,27,1,28,1,28,
        1,28,1,28,5,28,189,8,28,10,28,12,28,192,9,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,5,29,203,8,29,10,29,12,29,206,9,29,1,29,
        1,29,1,190,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,6,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,4,0,10,10,
        13,13,39,39,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,215,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,
        0,3,63,1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,74,1,0,0,0,11,79,1,0,
        0,0,13,90,1,0,0,0,15,99,1,0,0,0,17,110,1,0,0,0,19,116,1,0,0,0,21,
        118,1,0,0,0,23,120,1,0,0,0,25,123,1,0,0,0,27,126,1,0,0,0,29,129,
        1,0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,135,1,0,0,0,37,137,1,0,
        0,0,39,139,1,0,0,0,41,143,1,0,0,0,43,148,1,0,0,0,45,150,1,0,0,0,
        47,152,1,0,0,0,49,154,1,0,0,0,51,162,1,0,0,0,53,166,1,0,0,0,55,178,
        1,0,0,0,57,184,1,0,0,0,59,198,1,0,0,0,61,62,5,59,0,0,62,2,1,0,0,
        0,63,64,5,118,0,0,64,65,5,97,0,0,65,66,5,114,0,0,66,4,1,0,0,0,67,
        68,5,61,0,0,68,6,1,0,0,0,69,70,5,110,0,0,70,71,5,111,0,0,71,72,5,
        100,0,0,72,73,5,101,0,0,73,8,1,0,0,0,74,75,5,101,0,0,75,76,5,100,
        0,0,76,77,5,103,0,0,77,78,5,101,0,0,78,10,1,0,0,0,79,80,5,97,0,0,
        80,81,5,116,0,0,81,82,5,116,0,0,82,83,5,114,0,0,83,84,5,105,0,0,
        84,85,5,98,0,0,85,86,5,117,0,0,86,87,5,116,0,0,87,88,5,101,0,0,88,
        89,5,115,0,0,89,12,1,0,0,0,90,91,5,100,0,0,91,92,5,105,0,0,92,93,
        5,114,0,0,93,94,5,101,0,0,94,95,5,99,0,0,95,96,5,116,0,0,96,97,5,
        101,0,0,97,98,5,100,0,0,98,14,1,0,0,0,99,100,5,117,0,0,100,101,5,
        110,0,0,101,102,5,100,0,0,102,103,5,105,0,0,103,104,5,114,0,0,104,
        105,5,101,0,0,105,106,5,99,0,0,106,107,5,116,0,0,107,108,5,101,0,
        0,108,109,5,100,0,0,109,16,1,0,0,0,110,111,5,103,0,0,111,112,5,114,
        0,0,112,113,5,97,0,0,113,114,5,112,0,0,114,115,5,104,0,0,115,18,
        1,0,0,0,116,117,5,123,0,0,117,20,1,0,0,0,118,119,5,125,0,0,119,22,
        1,0,0,0,120,121,5,45,0,0,121,122,5,45,0,0,122,24,1,0,0,0,123,124,
        5,45,0,0,124,125,5,62,0,0,125,26,1,0,0,0,126,127,5,60,0,0,127,128,
        5,45,0,0,128,28,1,0,0,0,129,130,5,44,0,0,130,30,1,0,0,0,131,132,
        5,91,0,0,132,32,1,0,0,0,133,134,5,93,0,0,134,34,1,0,0,0,135,136,
        5,58,0,0,136,36,1,0,0,0,137,138,5,36,0,0,138,38,1,0,0,0,139,140,
        5,114,0,0,140,141,5,117,0,0,141,142,5,110,0,0,142,40,1,0,0,0,143,
        144,5,119,0,0,144,145,5,105,0,0,145,146,5,116,0,0,146,147,5,104,
        0,0,147,42,1,0,0,0,148,149,5,40,0,0,149,44,1,0,0,0,150,151,5,41,
        0,0,151,46,1,0,0,0,152,153,5,46,0,0,153,48,1,0,0,0,154,158,7,0,0,
        0,155,157,7,1,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,
        0,158,159,1,0,0,0,159,50,1,0,0,0,160,158,1,0,0,0,161,163,7,2,0,0,
        162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,
        165,52,1,0,0,0,166,172,5,39,0,0,167,171,8,3,0,0,168,169,5,92,0,0,
        169,171,9,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,171,174,1,0,0,0,
        172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,
        175,176,5,39,0,0,176,54,1,0,0,0,177,179,7,4,0,0,178,177,1,0,0,0,
        179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,
        182,183,6,27,0,0,183,56,1,0,0,0,184,185,5,47,0,0,185,186,5,42,0,
        0,186,190,1,0,0,0,187,189,9,0,0,0,188,187,1,0,0,0,189,192,1,0,0,
        0,190,191,1,0,0,0,190,188,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,
        0,193,194,5,42,0,0,194,195,5,47,0,0,195,196,1,0,0,0,196,197,6,28,
        0,0,197,58,1,0,0,0,198,199,5,47,0,0,199,200,5,47,0,0,200,204,1,0,
        0,0,201,203,8,5,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,
        0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,6,29,
        0,0,208,60,1,0,0,0,8,0,158,164,170,172,180,190,204,1,6,0,0
    ]

class GraphgifLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    ID = 25
    NUMBER = 26
    STRING = 27
    WS = 28
    COMMENT = 29
    COMMENT_LINE = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'var'", "'='", "'node'", "'edge'", "'attributes'", "'directed'", 
            "'undirected'", "'graph'", "'{'", "'}'", "'--'", "'->'", "'<-'", 
            "','", "'['", "']'", "':'", "'$'", "'run'", "'with'", "'('", 
            "')'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "WS", "COMMENT", "COMMENT_LINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "ID", "NUMBER", "STRING", 
                  "WS", "COMMENT", "COMMENT_LINE" ]

    grammarFileName = "Graphgif.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


